// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @unique @default(cuid())
  username        String @unique
  hashed_password String

  sessions       Session[]
  card           Card?
  profilePicture Image?
  portfolio      Portfolio?
  posts          Post[]
  projects       Project[]
  profile        Profile?

  followers  Follow[] @relation("followers")
  followings Follow[] @relation("followings")
}

model Session {
  id        String   @id @unique @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Image {
  id String @id @unique @default(cuid())

  imgbbId   String
  title     String
  url       String
  imgbbUrl  String
  deleteUrl String
  mime      String
  width     BigInt
  height    BigInt
  size      BigInt
  time      BigInt

  userId String @unique
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Card {
  id String @id @unique @default(cuid())

  name    String @default("")
  title   String @default("")
  icons   String @default("")
  socials String @default("")
  style   String @default("")

  userId String @unique
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Portfolio {
  id String @id @unique @default(cuid())

  body String @default("")

  userId String @unique
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Post {
  id String @id @unique @default(cuid())

  title String @default("")
  body  String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pinPostFor Profile?

  userId String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Project {
  id String @id @unique @default(cuid())

  title String @default("")
  tags  String @default("")
  body  String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pinProjectFor Profile?

  userId String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Follow {
  followerId String
  followers  User   @relation("followers", references: [id], fields: [followerId])

  followingId String
  followings  User   @relation("followings", references: [id], fields: [followingId])

  @@id([followerId, followingId])
}

model Profile {
  id String @id @unique @default(cuid())

  name   String?
  status String?

  pinPostId String? @unique
  pinPost   Post?   @relation(references: [id], fields: [pinPostId])

  pinProjectId String?  @unique
  pinProject   Project? @relation(references: [id], fields: [pinProjectId])

  userId String @unique
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}
